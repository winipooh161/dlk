export function initializeEmojiPicker(textarea) {
    const container = textarea.parentElement;
    const emojiButton = document.createElement('button');
    const emojiPicker = document.createElement('div');
    
    emojiButton.textContent = "üòâ";
    emojiButton.type = "button";
    emojiButton.classList.add('emoji-button');
    
    emojiPicker.classList.add('emoji-picker');
    emojiPicker.style.position = 'absolute';

    
    // –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const emojiCategories = {
        recent: [], // –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
        smileys: ["üòÄ","üòÅ","üòÇ","ü§£","üòÉ","üòÑ","üòÖ","üòÜ","üòâ","üòä","üòç","üòò","üòú","üòé","üò≠","üò°"],
        emotions: ["üòá","üòà","üôÉ","ü§î","üò•","üòì","ü§©","ü•≥","ü§Ø","ü§¨","üò±","üò¥","ü•∞","üòù","ü§ó","üò∂"],
        animals: ["üê±","üê∂","üê≠","üêπ","üê∞","ü¶ä","üêª","üêº","ü¶Å","üêÆ","üê∑","üê∏","üêµ","üêî","üêß","üê¶"],
        plants: ["üåπ","üåª","üå∫","üå∑","üåº","üçÄ","üåø","üå¥","üåµ","üå≤","üå≥","üçÑ","üåæ","üçÅ","üçÇ","üçÉ"],
        food: ["üçé","üçì","üçí","üçá","üçâ","üçã","üçä","üçå","ü•ù","üçç","ü•≠","üçï","üçî","üåÆ","üç£","üç©"],
        objects: ["üì±","üíª","üì∑","üîã","üí°","üéÅ","‚öΩ","üèÄ","üéÆ","üéß","üìö","üîë","üí∞","‚è∞","üîç","üîí"]
    };
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–∑ localStorage
    try {
        const savedRecent = localStorage.getItem('recentEmojis');
        if (savedRecent) {
            emojiCategories.recent = JSON.parse(savedRecent).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 10 —ç–º–æ–¥–∑–∏
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ–¥–∑–∏:', e);
        emojiCategories.recent = [];
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    function addToRecentEmojis(emoji) {
        // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        emojiCategories.recent = emojiCategories.recent.filter(e => e !== emoji);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
        emojiCategories.recent.unshift(emoji);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–º–æ–¥–∑–∏
        if (emojiCategories.recent.length > 10) {
            emojiCategories.recent.pop();
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        try {
            localStorage.setItem('recentEmojis', JSON.stringify(emojiCategories.recent));
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ–¥–∑–∏:', e);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–µ–¥–∞–≤–Ω–∏–µ"
        updateRecentEmojisDisplay();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —ç–º–æ–¥–∑–∏
    function updateRecentEmojisDisplay() {
        const recentTab = emojiPicker.querySelector('.emoji-category[data-category="recent"]');
        if (recentTab) {
            const recentContent = recentTab.querySelector('.emoji-content');
            
            // –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            if (emojiCategories.recent.length === 0) {
                recentContent.innerHTML = '<div class="emoji-empty-message">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —ç–º–æ–¥–∑–∏</div>';
            } else {
                recentContent.innerHTML = '';
                emojiCategories.recent.forEach(emoji => {
                    const span = document.createElement('span');
                    span.classList.add('emoji-item');
                    span.textContent = emoji;
                    recentContent.appendChild(span);
                });
            }
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —ç–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    let pickerHTML = '<div class="emoji-tabs">';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryNames = {
        recent: "–ù–µ–¥–∞–≤–Ω–∏–µ",
        smileys: "–°–º–∞–π–ª–∏–∫–∏",
        emotions: "–≠–º–æ—Ü–∏–∏",
        animals: "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        plants: "–†–∞—Å—Ç–µ–Ω–∏—è",
        food: "–ï–¥–∞",
        objects: "–û–±—ä–µ–∫—Ç—ã"
    };
    
    Object.keys(emojiCategories).forEach((category, index) => {
        pickerHTML += `<div class="emoji-tab ${index === 0 ? 'active' : ''}" data-category="${category}">${categoryNames[category]}</div>`;
    });
    
    pickerHTML += '</div><div class="emoji-categories">';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.keys(emojiCategories).forEach((category, index) => {
        pickerHTML += `<div class="emoji-category ${index === 0 ? 'active' : ''}" data-category="${category}">`;
        pickerHTML += `<div class="emoji-content">`;
        
        if (category === 'recent' && emojiCategories.recent.length === 0) {
            pickerHTML += '<div class="emoji-empty-message">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —ç–º–æ–¥–∑–∏</div>';
        } else {
            emojiCategories[category].forEach(emoji => {
                pickerHTML += `<span class="emoji-item">${emoji}</span>`;
            });
        }
        
        pickerHTML += '</div></div>';
    });
    
    pickerHTML += '</div>';
    
    emojiPicker.innerHTML = pickerHTML;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    emojiPicker.querySelectorAll('.emoji-tab').forEach(tab => {
        tab.addEventListener('click', () => {
            const category = tab.getAttribute('data-category');
            
            // –î–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            emojiPicker.querySelectorAll('.emoji-tab').forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            emojiPicker.querySelectorAll('.emoji-category').forEach(cat => {
                cat.classList.remove('active');
                if (cat.getAttribute('data-category') === category) {
                    cat.classList.add('active');
                }
            });
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏
    emojiPicker.addEventListener('click', (e) => {
        if (e.target.classList.contains('emoji-item')) {
            const emoji = e.target.textContent;
            const cursorPos = textarea.selectionStart;
            const textBefore = textarea.value.substring(0, cursorPos);
            const textAfter = textarea.value.substring(cursorPos);
            
            textarea.value = textBefore + emoji + textAfter;
            const newPos = cursorPos + emoji.length;
            textarea.selectionStart = newPos;
            textarea.selectionEnd = newPos;
            textarea.focus();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            addToRecentEmojis(emoji);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä–∞
    const style = document.createElement('style');
    style.textContent = `
      
    `;
    document.head.appendChild(style);
    
    container.appendChild(emojiButton);
    container.appendChild(emojiPicker);
    emojiPicker.style.display = "none";
    
    emojiButton.addEventListener('click', (event) => {
        event.stopPropagation();
        emojiPicker.style.display = (emojiPicker.style.display === "none") ? "flex" : "none";
    });
    
    document.addEventListener('click', (event) => {
        if (!emojiPicker.contains(event.target) && !emojiButton.contains(event.target)) {
            emojiPicker.style.display = "none";
        }
    });
}
