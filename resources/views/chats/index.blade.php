{{-- resources/views/chats/index.blade.php --}}

{{-- –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º layout) --}}
<script>
    window.Laravel = {
        user: @json([
            'id'   => auth()->id(),
            'name' => auth()->user()->name ?? 'Anon',
        ]),
    };
</script>
 
{{-- –°—Ç–∏–ª–∏ –∏–ª–∏ meta –¥–ª—è CSRF-—Ç–æ–∫–µ–Ω–∞ –æ–±—ã—á–Ω–æ –≤ –≤–∞—à–µ–º layout --}}
{{-- <meta name="csrf-token" content="{{ csrf_token() }}"> --}}

{{-- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ò–ö–ï–†–ê –≠–ú–û–¢–ò–ö–û–ù–´ (–û–î–ù–ê –î–õ–Ø –û–ë–û–ò–• –†–ï–ñ–ò–ú–û–í) --}}
<script>
    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ–º Emoji Picker –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É <textarea>.
     */
    function initializeEmojiPicker(textarea) {
        const container = textarea.parentElement;

        const emojiButton = document.createElement('button');
        const emojiPicker = document.createElement('div');

        // –ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∂–∏
        emojiButton.textContent = "üòÄ";
        emojiButton.type = "button"; // —á—Ç–æ–±—ã –Ω–µ —Å–∞–±–º–∏—Ç–∏–ª–∞—Å—å —Ñ–æ—Ä–º–∞
        emojiButton.classList.add('emoji-button');

        // –°–∞–º "–ø–æ–ø–∞–ø" —Å –Ω–∞–±–æ—Ä–æ–º —Å–º–∞–π–ª–æ–≤
        emojiPicker.classList.add('emoji-picker');

        // –°–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–∏–∫–æ–≤ (–º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
        const emojis = [
            "üòÄ","üòÅ","üòÇ","ü§£","üòÉ","üòÑ","üòÖ","üòÜ","üòâ","üòä","üòç","üòò","üòú","üòé","üò≠","üò°",
            "üòá","üòà","üôÉ","ü§î","üò•","üòì","ü§©","ü•≥","ü§Ø","ü§¨","ü§°","üëª","üíÄ","üëΩ","ü§ñ","üéÉ",
            "üê±","üê∂","üê≠","üêπ","üê∞","ü¶ä","üêª","üêº","ü¶Å","üêÆ","üê∑","üê∏","üêµ","üêî","üêß","üê¶",
            "üåπ","üåª","üå∫","üå∑","üåº","üçé","üçì","üçí","üçá","üçâ","üçã","üçä","üçå","ü•ù","üçç","ü•≠"
        ];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è —Å–ø–∏—Å–∫–∞
        let emojiHTML = '';
        emojis.forEach(emoji => {
            emojiHTML += `<span class="emoji-item">${emoji}</span>`;
        });
        emojiPicker.innerHTML = emojiHTML;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–º–∞–π–ª–∏–∫—É
        emojiPicker.addEventListener('click', (e) => {
            if (e.target.classList.contains('emoji-item')) {
                const emoji = e.target.textContent;
                const cursorPos = textarea.selectionStart;
                const textBefore = textarea.value.substring(0, cursorPos);
                const textAfter = textarea.value.substring(cursorPos);

                // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–º–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                textarea.value = textBefore + emoji + textAfter;
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–º–∞–π–ª–∞
                const newPos = cursorPos + emoji.length;
                textarea.selectionStart = newPos;
                textarea.selectionEnd = newPos;
                textarea.focus();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
        container.appendChild(emojiButton);
        container.appendChild(emojiPicker);

        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–æ–≤
        emojiPicker.style.display = "none";

        // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å
        emojiButton.addEventListener('click', (event) => {
            event.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å—Ä–∞–∑—É –∂–µ
            emojiPicker.style.display = (emojiPicker.style.display === "none") ? "flex" : "none";
        });

        // –ö–ª–∏–∫ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞ —Å–º–∞–π–ª–æ–≤ —Å–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ
        document.addEventListener('click', (event) => {
            if (!emojiPicker.contains(event.target) && !emojiButton.contains(event.target)) {
                emojiPicker.style.display = "none";
            }
        });
    }
</script>


{{-- =========================================
     1) –†–ï–ñ–ò–ú: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
   ========================================= --}}
@if(isset($dealChat) && $dealChat)
    <div class="chat-container single-deal-chat">
        <div class="chat-box">
            <div class="chat-header">
                –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å–¥–µ–ª–∫–∏: {{ $dealChat->name }}
            </div>

            <!-- –ë–ª–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ -->
            <div class="chat-messages" id="chat-messages">
                <ul></ul>
            </div>

            <!-- –ü–æ–ª–µ –≤–≤–æ–¥–∞ -->
            <div class="chat-input" style="position: relative;">
                <textarea id="chat-message" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." maxlength="500"></textarea>
                <button id="send-message">
                    <img src="{{ asset('/storage/icon/send.svg') }}" alt="–û—Ç–ø—Ä–∞–≤–∏—Ç—å" width="24" height="24">
                </button>
            </div>
        </div>
    </div>

    <script>
        // ----------------------------------
        // –û–¥–∏–Ω–æ—á–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        // ----------------------------------
        const currentChatId   = "{{ $dealChat->id }}";
        const currentChatType = "group";

        const chatMessagesContainer = document.getElementById('chat-messages');
        const chatMessagesList      = chatMessagesContainer.querySelector('ul');
        const chatMessageInput      = document.getElementById('chat-message');
        const sendMessageButton     = document.getElementById('send-message');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º emoji picker
        initializeEmojiPicker(chatMessageInput);

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
        const loadedMessageIds = new Set();

        /** –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ */
        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
        }

        /** –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML */
        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, (m) => map[m]);
        }

        /** –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ */
        function scrollToBottom() {
            chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
        }

        /** –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */
        function renderMessages(messages, currentUserId) {
            let html = '';
            (messages || []).forEach(msg => {
                if (!loadedMessageIds.has(msg.id)) {
                    const isMy = (msg.sender_id === currentUserId);
                    const liClass = isMy ? 'my-message' : 'other-message';

                    html += `
                        <li class="${liClass}" data-id="${msg.id}">
                            <div><strong>${isMy ? '–í—ã' : escapeHtml(msg.sender_name || '???')}</strong></div>
                            <div>${escapeHtml(msg.message)}</div>
                            <span class="message-time">${formatTime(msg.created_at)}</span>
                        </li>
                    `;
                    loadedMessageIds.add(msg.id);
                }
            });

            if (html) {
                chatMessagesList.insertAdjacentHTML('beforeend', html);
                scrollToBottom();
            }
        }

        /** –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
        function loadMessages() {
            fetch(`/chats/${currentChatType}/${currentChatId}/messages`)
                .then(r => r.json())
                .then(data => {
                    if (data.messages) {
                        renderMessages(data.messages, data.current_user_id);
                        markMessagesAsRead();
                    }
                })
                .catch(e => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', e));
        }

        /** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ */
        function sendMessage() {
            const text = chatMessageInput.value.trim();
            if (!text) return;

            fetch(`/chats/${currentChatType}/${currentChatId}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                },
                body: JSON.stringify({ message: text }),
            })
            .then(r => r.json())
            .then(data => {
                if (data.message) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
                    renderMessages([data.message], data.message.sender_id);
                    chatMessageInput.value = '';
                }
            })
            .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e));
        }

        sendMessageButton.addEventListener('click', sendMessage);

        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter (–±–µ–∑ shift)
        chatMessageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        /** –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ */
        function markMessagesAsRead() {
            fetch(`/chats/${currentChatType}/${currentChatId}/mark-read`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                },
            }).catch(e => console.error('Error marking messages as read:', e));
        }

        /** –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫) */
        setInterval(() => {
            fetchNewMessages();
        }, 3000);

        /** –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID */
        function fetchNewMessages() {
            const lastLi = chatMessagesList.lastElementChild;
            const lastId = lastLi ? parseInt(lastLi.getAttribute('data-id')) : 0;

            fetch(`/chats/${currentChatType}/${currentChatId}/new-messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                },
                body: JSON.stringify({ last_message_id: lastId }),
            })
            .then(r => r.json())
            .then(data => {
                if (data.messages) {
                    renderMessages(data.messages, data.current_user_id);
                    markMessagesAsRead();
                }
            })
            .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', e));
        }

        // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ Laravel Echo (realtime), –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–∫:
        /*
        Echo.private(`chat.${currentChatId}`)
            .listen('.message.sent', (e) => {
                if (e.message.sender_id !== window.Laravel.user.id) {
                    renderMessages([e.message], window.Laravel.user.id);
                    markMessagesAsRead();
                }
            });
        */

        // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        loadMessages();
    </script>


{{-- =========================================
     2) –†–ï–ñ–ò–ú: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ + –ø–æ–∏—Å–∫
   ========================================= --}}
@else
    <div class="chat-container">
        <!-- Chat List -->
        <div class="user-list" style="z-index: 41;">
            <h4>–í—Å–µ —á–∞—Ç—ã</h4>
            <input type="text" id="search-chats" placeholder="–ü–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º..." />
            <ul id="chat-list">
                @if(isset($chats) && count($chats))
                    @foreach ($chats as $chat)
                        <li data-chat-id="{{ $chat['id'] }}" data-chat-type="{{ $chat['type'] }}"
                            style="position: relative; display: flex; align-items: center; margin-bottom: 10px; cursor: pointer;">
                            <div class="user-list__avatar">
                                <img src="{{ asset($chat['avatar_url']) }}" alt="{{ $chat['name'] }}">
                            </div>
                            <div class="user-list__info" style="margin-left: 10px; width: 100%;">
                                <h5>
                                    {{ $chat['name'] }}
                                    @if ($chat['unread_count'] > 0)
                                        <span class="unread-count">{{ $chat['unread_count'] }}</span>
                                    @endif
                                </h5>
                            </div>
                        </li>
                    @endforeach
                @else
                    <p>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                @endif
            </ul>
        </div>

        <!-- Chat Area -->
        <div class="chat-box">
            <div class="chat-header" id="chat-header">
                –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è
            </div>

            <div class="chat-messages" id="chat-messages">
                <ul></ul>
            </div>

            <div class="chat-input" style="position: relative;">
                <textarea id="chat-message" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." maxlength="500"></textarea>
                <button id="send-message">
                    <img src="{{ asset('/storage/icon/send.svg') }}" alt="–û—Ç–ø—Ä–∞–≤–∏—Ç—å" width="24" height="24">
                </button>
            </div>
        </div>
    </div>

    <!-- Notifications Container (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤—Å–ø–ª—ã–≤–∞—à–∫–∞) -->
    <div id="notifications" class="notifications-container"></div>

    <script>
        // --------------------------
        // –ü–û–õ–ù–´–ô –†–ï–ñ–ò–ú (—Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤)
        // --------------------------

        const chatMessagesContainer = document.getElementById('chat-messages');
        const chatMessagesList      = chatMessagesContainer.querySelector('ul');
        const chatMessageInput      = document.getElementById('chat-message');
        const sendMessageButton     = document.getElementById('send-message');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º emoji picker
        initializeEmojiPicker(chatMessageInput);

        const chatList             = document.getElementById('chat-list');
        const chatHeader           = document.getElementById('chat-header');
        const searchInput          = document.getElementById('search-chats');
        const notificationsContainer = document.getElementById('notifications');

        let currentChatId   = null;
        let currentChatType = null;

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const loadedMessageIds = new Set();

        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
        }

        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;',
            };
            return text.replace(/[&<>"']/g, (m) => map[m]);
        }

        function scrollToBottom() {
            chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
        }

        function renderMessages(messages, currentUserId) {
            if (!Array.isArray(messages)) return;

            let html = '';
            messages.forEach(message => {
                if (!loadedMessageIds.has(message.id)) {
                    const isMyMessage = (message.sender_id === currentUserId);
                    let liClass = isMyMessage ? 'my-message' : 'other-message';

                    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:
                    let readStatus = '';
                    if (isMyMessage && message.is_read) {
                        readStatus = '<span class="read-status">‚úì‚úì</span>';
                    }

                    html += `
                        <li class="${liClass}" data-id="${message.id}">
                            <div>
                                <strong>${isMyMessage ? '–í—ã' : escapeHtml(message.sender_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</strong>
                            </div>
                            <div>${escapeHtml(message.message)}</div>
                            <span class="message-time">${formatTime(message.created_at)}</span>
                            ${readStatus}
                        </li>
                    `;
                    loadedMessageIds.add(message.id);
                }
            });

            if (html) {
                chatMessagesList.insertAdjacentHTML('beforeend', html);
                scrollToBottom();
            }
        }

        function loadMessages(chatId, chatType) {
            chatMessagesList.innerHTML = '';
            loadedMessageIds.clear();

            const chatItem = document.querySelector(`[data-chat-id="${chatId}"][data-chat-type="${chatType}"] h5`);
            chatHeader.textContent = chatItem ? chatItem.textContent : '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è';

            fetch(`/chats/${chatType}/${chatId}/messages`)
                .then(r => r.json())
                .then(data => {
                    if (data.messages) {
                        const currentUserId = data.current_user_id;
                        renderMessages(data.messages, currentUserId);
                        markMessagesAsRead(chatId, chatType);
                        updateUnreadCountUI(chatId, chatType, 0);
                    }
                })
                .catch(e => console.error('Error loading messages:', e));
        }

        function fetchNewMessages() {
            if (!currentChatId) return;
            const lastMessageId = getLastMessageId();

            fetch(`/chats/${currentChatType}/${currentChatId}/new-messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                },
                body: JSON.stringify({ last_message_id: lastMessageId }),
            })
            .then(r => r.json())
            .then(data => {
                if (data.messages) {
                    renderMessages(data.messages, data.current_user_id);
                    markMessagesAsRead(currentChatId, currentChatType);
                    updateUnreadCountUI(currentChatId, currentChatType, 0);
                }
            })
            .catch(e => console.error('Error fetching new messages:', e));
        }

        function sendMessage() {
            if (!currentChatId || !chatMessageInput.value.trim()) return;
            const message = chatMessageInput.value.trim();

            fetch(`/chats/${currentChatType}/${currentChatId}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                },
                body: JSON.stringify({ message }),
            })
            .then(r => {
                if (!r.ok) {
                    return r.json().then(err => { throw err; });
                }
                return r.json();
            })
            .then(data => {
                if (data.message) {
                    renderMessages([data.message], data.message.sender_id);
                    chatMessageInput.value = '';
                    scrollToBottom();
                }
            })
            .catch(e => console.error('Error sending message:', e));
        }

        function markMessagesAsRead(chatId, chatType) {
            fetch(`/chats/${chatType}/${chatId}/mark-read`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                }
            }).catch(e => console.error('Error marking messages as read:', e));
        }

        function getLastMessageId() {
            const lastMessage = chatMessagesList.lastElementChild;
            return lastMessage ? parseInt(lastMessage.getAttribute('data-id')) : 0;
        }

        function updateUnreadCountUI(chatId, chatType, count) {
            const chatItem = document.querySelector(`[data-chat-id="${chatId}"][data-chat-type="${chatType}"]`);
            if (!chatItem) return;

            let unreadBadge = chatItem.querySelector('.unread-count');
            if (count > 0) {
                if (unreadBadge) {
                    unreadBadge.textContent = count;
                } else {
                    unreadBadge = document.createElement('span');
                    unreadBadge.className = 'unread-count';
                    unreadBadge.textContent = count;
                    chatItem.querySelector('.user-list__info').appendChild(unreadBadge);
                }
                // –ü–æ–¥–Ω–∏–º–∞–µ–º —á–∞—Ç –Ω–∞–≤–µ—Ä—Ö
                chatItem.parentNode.insertBefore(chatItem, chatItem.parentNode.firstChild);
            } else {
                if (unreadBadge) {
                    unreadBadge.remove();
                }
            }
        }

        function incrementUnreadCount(chatId, chatType) {
            const chatItem = document.querySelector(`[data-chat-id="${chatId}"][data-chat-type="${chatType}"]`);
            if (!chatItem) return;

            let unreadBadge = chatItem.querySelector('.unread-count');
            if (unreadBadge) {
                unreadBadge.textContent = parseInt(unreadBadge.textContent) + 1;
            } else {
                unreadBadge = document.createElement('span');
                unreadBadge.className = 'unread-count';
                unreadBadge.textContent = '1';
                chatItem.querySelector('.user-list__info').appendChild(unreadBadge);
            }
            chatItem.parentNode.insertBefore(chatItem, chatItem.parentNode.firstChild);
        }

        function fetchUnreadCounts() {
            fetch(`/chats/unread-counts`)
                .then(r => r.json())
                .then(data => {
                    if (data.personal && data.group) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ
                        for (const [senderId, count] of Object.entries(data.personal)) {
                            updateUnreadCountUI(senderId, 'personal', count);
                        }
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ
                        for (const [gChatId, gCount] of Object.entries(data.group)) {
                            updateUnreadCountUI(gChatId, 'group', gCount);
                        }
                    }
                })
                .catch(e => console.error('Error fetching unread counts:', e));
        }

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        setInterval(fetchNewMessages, 1000);
        setInterval(fetchUnreadCounts, 5000);

        // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        chatList.addEventListener('click', (event) => {
            const chatElement = event.target.closest('li');
            if (!chatElement) return;

            const chatId   = chatElement.getAttribute('data-chat-id');
            const chatType = chatElement.getAttribute('data-chat-type');

            if (currentChatId === chatId && currentChatType === chatType) return;

            currentChatId   = chatId;
            currentChatType = chatType;

            removeNotificationsForChat(chatId, chatType);
            loadMessages(chatId, chatType);
            subscribeToChat(chatId, chatType);
        });

        function subscribeToChat(chatId, chatType) {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (currentChatId && currentChatType) {
                if (currentChatType === 'group') {
                    window.Echo.leave(`chat.${currentChatId}`);
                } else {
                    window.Echo.leave(`user.${currentChatId}`);
                }
            }

            currentChatId   = chatId;
            currentChatType = chatType;

            if (chatType === 'group') {
                window.Echo.private(`chat.${chatId}`)
                    .listen('.message.sent', (e) => {
                        handleIncomingMessage(e.message);
                    })
                    .listen('.messages.read', (e) => {
                        updateReadStatus(e.userId);
                    });
            } else {
                window.Echo.private(`user.${chatId}`)
                    .listen('.message.sent', (e) => {
                        handleIncomingMessage(e.message);
                    });
            }
        }

        function updateReadStatus(userId) {
            document.querySelectorAll('.read-status').forEach(el => {
                if (!el.classList.contains('read')) {
                    el.textContent = '‚úì‚úì';
                    el.classList.add('read');
                }
            });
            const unreadBadge = document.querySelector(
                `[data-chat-id="${currentChatId}"][data-chat-type="${currentChatType}"] .unread-count`
            );
            if (unreadBadge) unreadBadge.remove();
        }

        function handleIncomingMessage(message) {
            const messageChatId   = message.chat_id || message.sender_id;
            const messageChatType = message.chat_id ? 'group' : 'personal';

            if (currentChatId == messageChatId && currentChatType == messageChatType) {
                renderMessages([message], window.Laravel.user.id);
                markMessagesAsRead(currentChatId, currentChatType);
            } else {
                incrementUnreadCount(messageChatId, messageChatType);
                showNotification(message);
            }
            playSoundNotification();
        }

        function showNotification(message) {
            if (!notificationsContainer) return;
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.innerHTML = `
                <strong>${escapeHtml(message.sender_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</strong>: ${escapeHtml(message.message)}
            `;
            notificationsContainer.appendChild(notification);
            setTimeout(() => notification.remove(), 5000);
        }

        function playSoundNotification() {
            const audio = new Audio('{{ asset("sounds/notification.mp3") }}');
            audio.play().catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∑–≤—É–∫–∞:', e));
        }

        function removeNotificationsForChat(chatId, chatType) {
            if (notificationsContainer) {
                notificationsContainer.innerHTML = '';
            }
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
        searchInput.addEventListener('input', () => {
            const keyword = searchInput.value.toLowerCase();
            chatList.querySelectorAll('li').forEach(chat => {
                const chatName = chat.querySelector('h5').textContent.toLowerCase();
                chat.style.display = chatName.includes(keyword) ? 'flex' : 'none';
            });
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
        sendMessageButton.addEventListener('click', sendMessage);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–±–µ–∑ shift)
        chatMessageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç
        document.addEventListener('DOMContentLoaded', () => {
            const firstChat = chatList.querySelector('li');
            if (firstChat) firstChat.click();
        });
    </script>
@endif

{{-- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è emoji picker (–∏ —Ç.–¥.) --}}
<style>
    
</style>
