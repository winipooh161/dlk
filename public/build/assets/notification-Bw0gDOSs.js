import"./firebase-init-WlDQV2z_.js";import"./index.esm2017-NZQW5Whv.js";document.addEventListener("DOMContentLoaded",()=>{if("Notification"in window&&Notification.permission!=="granted"&&Notification.permission!=="denied"){const o=document.createElement("div");o.className="notification-permission-banner",o.innerHTML=`
            <div class="notification-banner-content">
                <p>Разрешите уведомления, чтобы быть в курсе новых сообщений</p>
                <button id="allow-notifications" class="btn btn-primary">Разрешить</button>
                <button id="close-notification-banner" class="btn btn-secondary">Позже</button>
            </div>
        `,document.body.appendChild(o),document.getElementById("allow-notifications").addEventListener("click",()=>{Notification.requestPermission().then(t=>{console.log("Пользователь "+(t==="granted"?"разрешил":"не разрешил")+" уведомления"),o.remove()})}),document.getElementById("close-notification-banner").addEventListener("click",()=>{o.remove()})}});class s{constructor(){this.notifications=[],this.listeners=[],this.userId=null,this.enabled=!0,this.checkInterval=null,this.lastCheck=Date.now()}init(t){return this.userId=t,console.log("[Notification System] Initialized for user:",t),this.startChecking(),this.registerServiceWorker(),this}registerServiceWorker(){"serviceWorker"in navigator&&navigator.serviceWorker.register("/notification-sw.js").then(t=>{console.log("[Notification System] Service Worker registered:",t)}).catch(t=>{console.error("[Notification System] Service Worker registration failed:",t)})}startChecking(t=1e4){this.checkInterval&&clearInterval(this.checkInterval),this.checkInterval=setInterval(()=>{this.checkForNewNotifications()},t),this.checkForNewNotifications(),console.log(`[Notification System] Started checking every ${t}ms`)}stopChecking(){this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null,console.log("[Notification System] Stopped checking"))}checkForNewNotifications(){var e;if(!this.userId||!this.enabled)return;const t=this.lastCheck;this.lastCheck=Date.now(),fetch(`/api/notifications?since=${t}&user_id=${this.userId}`,{method:"GET",headers:{"Content-Type":"application/json","X-Requested-With":"XMLHttpRequest","X-CSRF-TOKEN":(e=document.querySelector('meta[name="csrf-token"]'))==null?void 0:e.getAttribute("content")}}).then(i=>{if(!i.ok)throw new Error("Network response was not ok");return i.json()}).then(i=>{i&&Array.isArray(i.notifications)&&i.notifications.length>0&&(console.log("[Notification System] Received new notifications:",i.notifications),i.notifications.forEach(n=>{this.processNotification(n)}))}).catch(i=>{console.error("[Notification System] Error fetching notifications:",i)})}processNotification(t){console.log("[Notification System] Processing notification:",t),this.notifications.push(t),this.notifyListeners(t),this.showNotification(t)}showNotification(t){if(window.Notification&&Notification.permission==="granted"){const e=new Notification(t.title||"Новое уведомление",{body:t.body||t.message||"",icon:t.icon||"/storage/icon/notification.png"});e.onclick=()=>{console.log("[Notification System] Notification clicked:",t),t.url&&window.open(t.url,"_blank"),e.close()}}else this.showCustomNotification(t)}showCustomNotification(t){let e=document.getElementById("custom-notification-container");e||(e=document.createElement("div"),e.id="custom-notification-container",e.style.position="fixed",e.style.top="20px",e.style.right="20px",e.style.zIndex="9999",document.body.appendChild(e));const i=document.createElement("div");i.className="custom-notification",i.innerHTML=`
            <div class="custom-notification-header">
                <strong>${t.title||"Новое уведомление"}</strong>
                <span class="custom-notification-close">&times;</span>
            </div>
            <div class="custom-notification-body">
                ${t.body||t.message||""}
            </div>
        `,i.style.backgroundColor="#ffffff",i.style.border="1px solid #ddd",i.style.borderRadius="8px",i.style.boxShadow="0 2px 10px rgba(0,0,0,0.1)",i.style.padding="15px",i.style.marginBottom="10px",i.style.width="300px",i.style.opacity="0",i.style.transform="translateX(50px)",i.style.transition="all 0.3s ease-in-out",e.appendChild(i),setTimeout(()=>{i.style.opacity="1",i.style.transform="translateX(0)"},10),t.url&&(i.addEventListener("click",()=>{window.location.href=t.url}),i.style.cursor="pointer"),i.querySelector(".custom-notification-close").addEventListener("click",n=>{n.stopPropagation(),this.removeNotification(i)}),setTimeout(()=>{this.removeNotification(i)},5e3)}removeNotification(t){t.style.opacity="0",t.style.transform="translateX(50px)",setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},300)}addListener(t){return typeof t=="function"&&!this.listeners.includes(t)&&(this.listeners.push(t),console.log("[Notification System] Listener added")),this}removeListener(t){const e=this.listeners.indexOf(t);return e!==-1&&(this.listeners.splice(e,1),console.log("[Notification System] Listener removed")),this}notifyListeners(t){this.listeners.forEach(e=>{try{e(t)}catch(i){console.error("[Notification System] Error in listener:",i)}})}requestPermission(){window.Notification&&Notification.requestPermission().then(t=>{console.log("[Notification System] Notification permission:",t)}).catch(t=>{console.error("[Notification System] Permission request error:",t)})}enable(){return this.enabled=!0,console.log("[Notification System] Notifications enabled"),this}disable(){return this.enabled=!1,console.log("[Notification System] Notifications disabled"),this}sendTestNotification(t="Test Notification",e="This is a test notification"){const i={id:`test-${Date.now()}`,title:t,body:e,timestamp:new Date().toISOString(),read:!1,type:"test"};console.log("[Notification System] Sending test notification:",i),this.processNotification(i)}}window.notificationSystem=new s;
